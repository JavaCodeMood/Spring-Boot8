1.Spring Data JPA是spring Data的一个子项目，它通过提供基于JPA的Repository
极大地减少了JPA作为数据访问方案的代码量。

2.spring-boot-starter-data-jpa依赖于spring-boot-starter-jdbc，而
Spring Boot对JDBC做了一些自动配置，源码放置在
org.springframework.boot.autoconfigure.jdbc下

3.Spring Boot还提供了一个初始化数据的功能：放置在类路径下的schema.sql文件
会自动用来初始化表结构；放置在类路径下的data.sql文件会自动用来填充表数据。

4.Spring Boot对JPA的字段配置放置在
org.springframework.boot.autoconfigure.orm.jpa下

5.Spring Boot对Spring Data JPA的自动配置放置在
org.springframework.boot.autoconfigure.data.jpa下

6.在pom.xml下引入Oracle的JDBC的驱动：
<dependency>
	<groupId>com.oracle</groupId>
    <artifactId>ojdbc6</artifactId>
    <version>11.2.0.2.0</version>
</dependency>

7.在pom.xml下引入MySql的JDBC驱动
<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
</dependency>

8.添加google guava依赖，它包含大量Java常用的工具类
<dependency>
	<groupId>com.google.guava</groupId>
	<artifactId>guava</artifactId>
	<version>18.0</version>
</dependency>

9.application.properties的MySql配置：
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/temp
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.database=MYSQL
#设置hibernate操作的时候在控制台显示其真实的sql语句
spring.jpa.show-sql=true
#hibernate提供了根据实体类自动维护数据表结构的功能
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop
#让控制器输出的json字符串格式更美观
spring.jackson.serialization.indent_output=true

10.application.properties的Oracle的配置：
spring.datasource.driverClassName=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc\:oracle\:thin\:@localhost\:1521\:xe
spring.datasource.username=root
spring.datasource.password=root

#设置hibernate操作的时候在控制台显示其真实的sql语句
spring.jpa.show-sql=true
#hibernate提供了根据实体类自动维护数据表结构的功能
spring.jpa.hibernate.ddl-auto=update
#让控制器输出的json字符串格式更美观
spring.jackson.serialization.indent_output=true

11.#hibernate提供了根据实体类自动维护数据表结构的功能,可以通过
spring.jpa.hibernate.ddl-auto来配置。有下列可选项：
1>create:启动时删除上一次生成的表，并根据实体类生成表，标志数据会被清空
2>create-drop:启动时根据实体类生成表，sessionFactory关闭时表会被删除
3>update:启动时会根据实体类生成表，当实体类属性变动的时候，表结构也会更新，在初期开发阶段使用此选项
4>validate:启动时验证实体类和数据表是否一致，在我们数据结构稳定时才有此选项。
5>none:不采取任何措施。

12.@Entity 注解指明这是一个和数据库表映射的实体类
@Id 注解指明这个属性映射为数据库表的主键
@GeneratedValue注解默认使用主键生成方式为自增，hibernate会为我们生成一个名为HIBERNATE_SEQUENCE的序列

13.在本程序中如果遇到java.net.BindException: Address already in use: bind这种错误，
说明8080端口被占用，或是上一次tomcat服务没有关闭造成的。

14.如果报 com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException这个错误，请到项目的Spring-Boot8\target\classes
目录下删除data.sql然后从新启动项目即可。